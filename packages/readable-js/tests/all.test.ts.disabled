import * as esprima from 'esprima';
import {Directive, ModuleDeclaration, Statement} from 'estree';

/*
Note: If some test doesn't pass, put it inside another test case, so that you can read the console.log.
 */

function assertMessage(code: string, message: string): void {
  expect(
    ReadableJS.read(code)
  ).toEqual(
    message
  );
}



it('getEvaluatedMessageForIndex', function () {
  const code = `var bar = 2;
bar = 1 + bar`;
  const r = esprima.parseScript(code, {
    "range": true,
    "loc": true
  });

  expect(
    ReadableJS.getEvaluatedMessageForIndex(code, 1, r)
  ).toEqual(
    'set bar to 3'
  );
});

it('getEvaluatedMessageForIndex multiple var declaration on same line', function () {
  const code = `var bar = 2, foo = 2;
bar = foo + bar`;
  const r = esprima.parseScript(code, {
    "range": true,
    "loc": true
  });

  expect(
    ReadableJS.getEvaluatedMessageForIndex(code, 1, r)
  ).toEqual(
    'set bar to 4'
  );
});

it('getEvaluatedMessageForIndex multiple var declaration', function () {
  const code = `var bar = 2; var foo = 2;
bar = foo + bar`;
  const r = esprima.parseScript(code, {
    "range": true,
    "loc": true
  });

  expect(
    ReadableJS.getEvaluatedMessageForIndex(code, 2, r)
  ).toEqual(
    'set bar to 4'
  );
});




it('should return nothing for nothing', function () {
  assertMessage('', '');
});

it('variables declarations', function () {
  assertMessage("var i = 2", "Create the variable <span class='readable-variable'>i</span> and set it to <span class='readable-value'>2</span>");
  assertMessage("var i = 2, j = 3;",
    `Create the variable <span class='readable-variable'>i</span> and set it to <span class='readable-value'>2</span>
Create the variable <span class='readable-variable'>j</span> and set it to <span class='readable-value'>3</span>`);
  assertMessage("let o = 5", "Create the variable <span class='readable-variable'>o</span> and set it to <span class='readable-value'>5</span>")
  assertMessage("const p = 21", "Create the constant <span class='readable-variable'>p</span> and set it to <span class='readable-value'>21</span>")
  assertMessage("var i", "Create the variable <span class='readable-variable'>i</span>");
  assertMessage("var fn = function() { return true; }", "Create the variable <span class='readable-variable'>fn</span> and set it to <span class='readable-value'>this function</span>");
});

it('ExpressionStatement', function () {
  //assertMessage("foo = 1 + bar", "set foo to 3");
  assertMessage("foo = 1 + bar", "set foo to 1 plus bar");
  assertMessage("1 + bar", "1 plus bar");
// , {
//     "before": "var bar = 2, foo = 0;"
//   }
});

it('BinaryExpression', function () {
  assertMessage("foo = 1 == 2", "set foo to 1 equal to 2");
  assertMessage("foo = 1 != 2", "set foo to 1 different 2");
  assertMessage("foo = 1 === 2", "set foo to 1 strict equal to 2");
  assertMessage("foo = 1 !== 2", "set foo to 1 strict different 2");
  assertMessage("foo = 1 < 2", "set foo to 1 less than 2");
  assertMessage("foo = 1 <= 2", "set foo to 1 less than or equal to 2");
  assertMessage("foo = 1 > 2", "set foo to 1 greater than 2");
  assertMessage("foo = 1 >= 2", "set foo to 1 greater than or equal to 2");

  assertMessage("foo = 1 + 2", "set foo to 1 plus 2");
  assertMessage("foo = 1 - 2", "set foo to 1 minus 2");
  assertMessage("foo = 1 * 2", "set foo to 1 times 2");
  assertMessage("foo = 1 / 2", "set foo to 1 divided by 2");
  assertMessage("foo = 1 % 2", "set foo to 1 modulo 2");

  assertMessage("foo = 1 | 2", "set foo to 1 bitwise-or 2");
  assertMessage("foo = 1 ^ 2", "set foo to 1 bitwise-and 2");
});

it('if condition', function () {
  const code = `if( 1 != 2 ) {\n   console.log(x, y);\n }`;
  const r = esprima.parseScript(code, {
    "range": true,
    "loc": true
  });

  expect(
    ReadableJS.getEvaluatedMessageForIndex(code, 0, r)
  ).toEqual(
    'Because 1 different 2'
  );
});

it('if condition no replace', function () {
  assertMessage("if( 1 != 2 ) {\n   console.log(x, y);\n }", "Test 1 different 2");
});

it('CallExpression', function () {
  assertMessage("go()", "Call the function go");
});

it('FunctionDeclaration', function () {
  assertMessage("function go () {}", "Declare the function go");
});



// COULD BE USEFUL FOR TESTS ? util install as dev package though
// Has to reconsider if that is useful
// function someLog(node: Directive | Statement | ModuleDeclaration) {
//   const a = util.inspect(node, { depth: 100, colors: true });
//
//   // will log into all.test.ts when running jest (on webstorm)
//   console.log(a);
// }
